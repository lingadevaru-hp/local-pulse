// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that suggests event categories based on a free-text search query.
 *
 * - guessEventCategory - A function that handles the category guessing process.
 * - GuessEventCategoryInput - The input type for the guessEventCategory function.
 * - GuessEventCategoryOutput - The return type for the guessEventCategory function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GuessEventCategoryInputSchema = z.object({
  query: z.string().describe('The user\u0027s free-text search query.'),
});
export type GuessEventCategoryInput = z.infer<typeof GuessEventCategoryInputSchema>;

const GuessEventCategoryOutputSchema = z.object({
  category: z.string().describe('The suggested event category based on the search query.'),
});
export type GuessEventCategoryOutput = z.infer<typeof GuessEventCategoryOutputSchema>;

export async function guessEventCategory(input: GuessEventCategoryInput): Promise<GuessEventCategoryOutput> {
  return guessEventCategoryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'guessEventCategoryPrompt',
  input: {schema: GuessEventCategoryInputSchema},
  output: {schema: GuessEventCategoryOutputSchema},
  prompt: `You are an AI assistant that suggests an event category based on a user's search query.

  Given the following search query, suggest a relevant event category.  The category should be a single word or short phrase.

  Search Query: {{{query}}}
  Category:`, // Intentionally left blank, model should suggest
});

const guessEventCategoryFlow = ai.defineFlow(
  {
    name: 'guessEventCategoryFlow',
    inputSchema: GuessEventCategoryInputSchema,
    outputSchema: GuessEventCategoryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
